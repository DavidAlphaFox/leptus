#+AUTHOR:   Sina Samavati
#+EMAIL:    sina.samv@gmail.com
#+OPTIONS:  ^:nil num:nil

* leptus Module
   :PROPERTIES:
   :CUSTOM_ID: leptus-module
   :END:

** Types
   :PROPERTIES:
   :CUSTOM_ID: types
   :END:

   #+BEGIN_SRC erlang
   Listener  = http | https
   Handlers  = [{HostMatch, [{module(), State :: any()}]}]

   HostMatch = term()
   StaticDir = file:name() | {priv_dir, App :: atom(), Dir :: file:name()}

   Option = {ip, inet:ip_address()}
          | {port, inet:port_number()}
          | {num_acceptors, non_neg_integer()}
          | {cacertfile, file:name_all()}
          | {certfile, file:name_all()}
          | {keyfile, file:name_all()}
          | {static_dir, {HostMatch, StaticDir}}
          | {log_handlers, [{module(), any()}]}
   Options = [Option]
   #+END_SRC

** Functions
   :PROPERTIES:
   :CUSTOM_ID: functions
   :END:

*** start_listener/2
    :PROPERTIES:
    :CUSTOM_ID: start_listener-2
    :END:

    Starts a listener of type ~Listener~.

    #+BEGIN_SRC erlang
    leptus:start_listener(Listener, HandlersOrApp) -> {ok, pid()}

    App = atom()
    HandlersOrApp = Handlers | App
    #+END_SRC

    Note that if you specify ~App~, Leptus will try to evaluate
    ~App/priv/leptus.config~ file which should contain:
    #+BEGIN_SRC erlang
    {handlers, Handlers}.
    {options, Options}.
    #+END_SRC

*** start_listener/3
    :PROPERTIES:
    :CUSTOM_ID: start_listener-3
    :END:

    #+BEGIN_SRC erlang
    leptus:start_listener(Listener, Handlers, Options) ->
        leptus:start_listener(Listener, Handlers, Options, #{})
    #+END_SRC

*** start_listener/4
    :PROPERTIES:
    :CUSTOM_ID: start_listener-4
    :END:

    Starts a listener of type ~Listener~.

    #+BEGIN_SRC erlang
    leptus:start_listener(Listener, Handlers, Options, CowboyProtoOpts) ->
        {ok, pid()}

    CowboyProtoOpts = cowboy:opts()
    #+END_SRC

*** upgrade/0
    :PROPERTIES:
    :CUSTOM_ID: upgrade-0
    :END:

    Upgrades running listeners.

    #+BEGIN_SRC erlang
    upgrade() -> upgrade([Listener])
    #+END_SRC

*** upgrade/1
    :PROPERTIES:
    :CUSTOM_ID: upgrade-1
    :END:

    Upgrades the given listeners.

    #+BEGIN_SRC erlang
    upgrade([Listener]) -> ok
    #+END_SRC

*** upgrade/2
    :PROPERTIES:
    :CUSTOM_ID: upgrade-2
    :END:

    #+BEGIN_SRC erlang
    upgrade(Listener, Handlers) -> upgrade(Listener, Handlers, Options)
    #+END_SRC

*** upgrade/3
    :PROPERTIES:
    :CUSTOM_ID: upgrade-3
    :END:

    Upgrades an running listener to switch to ~Handlers~ and ~Options~.

    #+BEGIN_SRC erlang
    upgrade(Listener, Handlers, Options) -> ok
    #+END_SRC

*** stop_listener/1
    :PROPERTIES:
    :CUSTOM_ID: stop_listener-1
    :END:

    Stops a listener.

    #+BEGIN_SRC erlang
    stop_listener(Listener) -> ok | {error, not_found}
    #+END_SRC

*** running_listeners/0
    :PROPERTIES:
    :CUSTOM_ID: running_listeners-0
    :END:

    Lists running listeners.

    #+BEGIN_SRC erlang
    running_listeners() -> [Listener]
    #+END_SRC

*** listener_uptime/1
    :PROPERTIES:
    :CUSTOM_ID: listener_uptime-1
    :END:

    Gives the uptime of a listener.

    #+BEGIN_SRC erlang
    listener_uptime(Listener) - >
        {Days :: integer(), calendar:time()} | {error, not_found}
    #+END_SRC
